{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d808ee33-5ddf-4be4-93d3-0e833bef5730",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting loggingNote: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  error: subprocess-exited-with-error\n",
      "  \n",
      "  python setup.py egg_info did not run successfully.\n",
      "  exit code: 1\n",
      "  \n",
      "  [24 lines of output]\n",
      "  Traceback (most recent call last):\n",
      "    File \"<string>\", line 2, in <module>\n",
      "    File \"<pip-setuptools-caller>\", line 14, in <module>\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\site-packages\\setuptools\\__init__.py\", line 22, in <module>\n",
      "      import _distutils_hack.override  # noqa: F401\n",
      "      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\site-packages\\_distutils_hack\\override.py\", line 1, in <module>\n",
      "      __import__('_distutils_hack').do_override()\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\site-packages\\_distutils_hack\\__init__.py\", line 90, in do_override\n",
      "      ensure_local_distutils()\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\site-packages\\_distutils_hack\\__init__.py\", line 76, in ensure_local_distutils\n",
      "      core = importlib.import_module('distutils.core')\n",
      "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\importlib\\__init__.py\", line 90, in import_module\n",
      "      return _bootstrap._gcd_import(name[level:], package, level)\n",
      "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\site-packages\\setuptools\\_distutils\\core.py\", line 13, in <module>\n",
      "      from .cmd import Command\n",
      "    File \"C:\\Users\\bkish\\anaconda3\\Lib\\site-packages\\setuptools\\_distutils\\cmd.py\", line 7, in <module>\n",
      "      import logging\n",
      "    File \"C:\\Users\\bkish\\AppData\\Local\\Temp\\pip-install-0i3ohggn\\logging_1f0ef9b5c9554ea99a5b4c042fbea61d\\logging\\__init__.py\", line 618\n",
      "      raise NotImplementedError, 'emit must be implemented '\\\n",
      "                               ^\n",
      "  SyntaxError: invalid syntax\n",
      "  [end of output]\n",
      "  \n",
      "  note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "error: metadata-generation-failed\n",
      "\n",
      "Encountered error while generating package metadata.\n",
      "\n",
      "See above for output.\n",
      "\n",
      "note: This is an issue with the package mentioned above, not pip.\n",
      "hint: See above for details.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Using cached logging-0.4.9.6.tar.gz (96 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'error'\n"
     ]
    }
   ],
   "source": [
    "pip install logging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a303e4f-5f3d-4808-bfc1-683eed73dc3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2fc2da7c-b8e3-4633-90de-17f86ccd369e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up basic logging \n",
    "logging.basicConfig( \n",
    "filename='etl_log.txt', \n",
    "level=logging.INFO, \n",
    "format='%(asctime)s - %(levelname)s - %(message)s' \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f268125b-917d-4ccb-8f7d-94414b27e593",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np \n",
    "import mysql.connector \n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5d269d66-c7f6-4223-94f1-53184f4ff2c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raw data loaded:\n",
      "   EMPLOYEE_ID FIRST_NAME  LAST_NAME     EMAIL  PHONE_NUMBER  HIRE_DATE  \\\n",
      "0          198     Donald   OConnell  DOCONNEL  650.507.9833  21-Jun-07   \n",
      "1          199    Douglas      Grant    DGRANT  650.507.9844  13-Jan-08   \n",
      "2          200   Jennifer     Whalen   JWHALEN  515.123.4444  17-Sep-03   \n",
      "3          201    Michael  Hartstein  MHARTSTE  515.123.5555  17-Feb-04   \n",
      "4          202        Pat        Fay      PFAY  603.123.6666  17-Aug-05   \n",
      "\n",
      "     JOB_ID  SALARY  \n",
      "0  SH_CLERK    2600  \n",
      "1  SH_CLERK    2600  \n",
      "2   AD_ASST    4400  \n",
      "3    MK_MAN   13000  \n",
      "4    MK_REP    6000  \n",
      "['EMPLOYEE_ID', 'FIRST_NAME', 'LAST_NAME', 'EMAIL', 'PHONE_NUMBER', 'HIRE_DATE', 'JOB_ID', 'SALARY']\n"
     ]
    }
   ],
   "source": [
    "csv_file_path = 'employees1.csv' \n",
    "df = pd.read_csv(csv_file_path) \n",
    "print(\"Raw data loaded:\") \n",
    "print(df.head()) \n",
    "print(df.columns.tolist()) \n",
    "logging.info(\"CSV loaded successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "57d016b6-a48d-4cb6-938d-a042fb730540",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handle missing values \n",
    "df.fillna({ \n",
    "'EMAIL': 'not_provided@example.com', \n",
    "'PHONE_NUMBER': '0000000000', \n",
    "'HIRE_DATE': '01-Jan-00', \n",
    "'SALARY': 0 \n",
    "}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e88d962-0de9-4e21-bc7c-7e9f5d23a106",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standardize column names (optional) \n",
    "df.columns = [col.strip().lower().replace(' ', '_') for col in df.columns] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "82be3f11-09d0-41b4-901b-db966707e683",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'hire_date', 'job_id', 'salary']\n"
     ]
    }
   ],
   "source": [
    "print(df.columns.tolist()) \n",
    "# Convert hire_date from 'dd-MMM-yy' to 'YYYY-MM-DD' \n",
    "df['hire_date'] = pd.to_datetime(df['hire_date'], format='%d-%b-%y', \n",
    "errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8554963f-147a-4970-bde2-2bb98f78b978",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace invalid dates with a default \n",
    "df['hire_date'] = df['hire_date'].fillna(pd.to_datetime('2000-01-01')) \n",
    "# Replace non-numeric salaries with 0 \n",
    "df['salary'] = pd.to_numeric(df['salary'], errors='coerce').fillna(0).astype(int) \n",
    "logging.info(\"Data cleaning completed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f5d001e3-6932-494c-b7ea-778cfa8fc5c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ----------------------------- \n",
    "# Step 3: Load - Insert into MySQL \n",
    "# ----------------------------- \n",
    "# MySQL connection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9836f86b-55ea-4051-b84e-104410ef6f31",
   "metadata": {},
   "outputs": [],
   "source": [
    "mydb = mysql.connector.connect( \n",
    "    host=\"localhost\", \n",
    "    user=\"root\", \n",
    "    password=\"28082004\", \n",
    "   database=\"employee\"  \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "856d1637-b50c-435e-9a17-c77fb56a191f",
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor = mydb.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e902270e-7ed3-4ce2-9a6a-eb7f81e1358d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create table if not exists \n",
    "cursor.execute(\"\"\" CREATE TABLE IF NOT EXISTS salary_2 ( empid INT, firstname VARCHAR(50), lastname VARCHAR(50), email VARCHAR(100), phone VARCHAR(20), hire_date DATE, job_id VARCHAR(20), salary INT ) \"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d3cb08f8-d4db-48a0-937e-6ca6f8adc5aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create table if not exists \n",
    "cursor.execute(\"\"\" \n",
    "    CREATE TABLE IF NOT EXISTS salary_2 ( \n",
    "        empid INT, \n",
    "        firstname VARCHAR(50), \n",
    "        lastname VARCHAR(50), \n",
    "        email VARCHAR(100), \n",
    "        phone VARCHAR(20), \n",
    "        hire_date DATE, \n",
    "        job_id VARCHAR(20), \n",
    "        salary INT \n",
    "    ) \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "7b0dcbd7-2a0a-4aad-8345-6f5ca67a24fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Insert rows\n",
    "for _, row in df.iterrows():\n",
    "    sql = \"\"\"\n",
    "        INSERT INTO salary_2 (empid, firstname, lastname, email, phone, hire_date, job_id, salary)\n",
    "        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\n",
    "        ON DUPLICATE KEY UPDATE\n",
    "            firstname=%s,\n",
    "            lastname=%s,\n",
    "            email=%s,\n",
    "            phone=%s,\n",
    "            hire_date=%s,\n",
    "            job_id=%s,\n",
    "            salary=%s\n",
    "    \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d9b1eef2-38f7-4f54-9bb7-ce48697dcf9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "values = (\n",
    "    int(row['employee_id']),\n",
    "    row['first_name'],\n",
    "    row['last_name'],\n",
    "    row['email'],\n",
    "    row['phone_number'],\n",
    "    row['hire_date'].date(),\n",
    "    row['job_id'],\n",
    "    int(row['salary']),\n",
    "    row['first_name'],\n",
    "    row['last_name'],\n",
    "    row['email'],\n",
    "    row['phone_number'],\n",
    "    row['hire_date'].date(),\n",
    "    row['job_id'],\n",
    "    int(row['salary'])\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "daa06b25-dd7f-4e13-8440-7ef61345a770",
   "metadata": {},
   "outputs": [],
   "source": [
    "    cursor.execute(sql, values) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "887b9167-ba94-4c8f-8a6b-a7bbc75809ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ETL process completed successfully.\n"
     ]
    }
   ],
   "source": [
    "mydb.commit() \n",
    "cursor.close() \n",
    "mydb.close() \n",
    "logging.error(\"Something went wrong\", exc_info=True) \n",
    "print(\"ETL process completed successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "753e23da-9266-4324-98fe-5acc8486b637",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bkish\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[NbConvertApp] Converting notebook ETL_program.ipynb to script\n",
      "[NbConvertApp] Writing 3271 bytes to ETL_program.py\n"
     ]
    }
   ],
   "source": [
    "import os \n",
    "print(os.getcwd()) \n",
    "get_ipython().system('jupyter nbconvert --to script ETL_program.ipynb')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e5beed6-0c8f-4655-bc82-855c45dfe378",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
